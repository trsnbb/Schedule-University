import Predmet from "./../models/Predmet.js";
import Schedule from "../models/Schedule.js";

const dayNames = {
  0: "–ü–Ω",
  1: "–í—Ç",
  2: "–°—Ä",
  3: "–ß—Ç",
  4: "–ü—Ç",
  5: "–°–±",
};

const typeNames = {
  lec: "–õ–µ–∫—Ü—ñ—è",
  prac: "–ü—Ä–∞–∫—Ç–∏–∫–∞",
  lab: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞",
};

const formatDays = (daysArray) => {
  if (!daysArray || daysArray.length === 0) return "–Ω–µ–≤—ñ–¥–æ–º—ñ –¥–Ω—ñ";
  return daysArray.map((d) => dayNames[d] || d).join(", ");
};

const formatType = (type) => typeNames[type] || type || "–Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø";

const getPredmetName = async (predmetId) => {
  if (!predmetId) return "–Ω–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç";
  try {
    const predmet = await Predmet.findById(predmetId).select("predmet");
    return predmet?.predmet || "–Ω–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç";
  } catch {
    return "–Ω–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç";
  }
};

// –ü—Ä–æ—Å—Ç–∏–π –∫–µ—à —Ä–æ–∑–∫–ª–∞–¥—ñ–≤ —É –ø–∞–º‚Äô—è—Ç—ñ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
const scheduleCache = new Map();

const getCachedSchedule = async (scheduleId) => {
  return scheduleCache.get(scheduleId.toString()) || null;
};

const updateCachedSchedule = (schedule) => {
  if (!schedule || !schedule._id) return;
  scheduleCache.set(schedule._id.toString(), schedule);
};

export async function handleScheduleChange(change, io) {
  let fullMessage = "";
  let shortMessage = "";

  switch (change.operationType) {
    case "insert": {
      const doc = change.fullDocument;
      const { groupId, lessons = [] } = doc;

      const lessonMessages = await Promise.all(
        lessons.map(async (lesson, index) => {
          if (lesson.isEvent) {
            return `üéâ –ü–æ–¥—ñ—è "${lesson.eventTitle}" –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –Ω–∞ ${lesson.date} –æ ${lesson.time}`;
          } else {
            const predmetName = await getPredmetName(lesson.predmetId);
            return `‚úÖ –î–æ–¥–∞–Ω–æ –ø–∞—Ä—É ‚Ññ${
              index + 1
            }: –ø—Ä–µ–¥–º–µ—Ç "${predmetName}", —Ç–∏–ø: ${formatType(
              lesson.type
            )}, –¥–Ω—ñ: ${formatDays(lesson.day)}, –ø–∞—Ä–∏: ${lesson.pairNumber?.join(
              ", "
            )}`;
          }
        })
      );

      shortMessage = "üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥";
      fullMessage = `üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –≥—Ä—É–ø–∏ ${groupId}:\n${lessonMessages.join(
        "\n"
      )}`;

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
      updateCachedSchedule(doc);

      break;
    }

    case "update": {
      const scheduleId = change.documentKey._id;

      // –ù–æ–≤–∏–π —Å—Ç–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç—É –ø–æ–≤–Ω—ñ—Å—Ç—é
      const scheduleNew = await Schedule.findById(scheduleId).lean();

      // –°—Ç–∞—Ä–∏–π —Å—Ç–∞–Ω –∑ –∫–µ—à—É
      const scheduleOld = await getCachedSchedule(scheduleId);

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
      updateCachedSchedule(scheduleNew);

      const oldLessons = scheduleOld?.lessons || [];
      const newLessons = scheduleNew?.lessons || [];

      let messages = [];

      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ–¥–∞–Ω—ñ
      const added = newLessons.filter(
        (nl) => !oldLessons.some((ol) => ol._id.toString() === nl._id.toString())
      );
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤–∏–¥–∞–ª–µ–Ω—ñ
      const removed = oldLessons.filter(
        (ol) => !newLessons.some((nl) => nl._id.toString() === ol._id.toString())
      );
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ
      const updated = newLessons.filter((nl) => {
        const ol = oldLessons.find((o) => o._id.toString() === nl._id.toString());
        if (!ol) return false; // —Ü–µ –Ω–æ–≤–∏–π, –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–∏–π
        // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Å–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –æ–±'—î–∫—Ç–∏, –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –≥–ª–∏–±—à–µ, —è–∫—â–æ —Ç—Ä–µ–±–∞
        return JSON.stringify(ol) !== JSON.stringify(nl);
      });

      for (const l of added) {
        if (l.isEvent) {
          messages.push(`‚ûï –î–æ–¥–∞–Ω–æ –ø–æ–¥—ñ—é "${l.eventTitle}" –Ω–∞ ${l.date}`);
        } else {
          const name = await getPredmetName(l.predmetId);
          messages.push(
            `‚ûï –î–æ–¥–∞–Ω–æ –ø–∞—Ä—É: "${name}", —Ñ–æ—Ä–º–∞—Ç: ${l.format || "–Ω–µ–≤—ñ–¥–æ–º–∏–π"}, —Ç–∏–ø: ${formatType(l.type)}, –¥–Ω—ñ: ${formatDays(l.day)}, –ø–∞—Ä–∏: ${l.pairNumber?.join(", ") || "–Ω–µ–≤—ñ–¥–æ–º—ñ"}, –∞—É–¥–∏—Ç–æ—Ä—ñ—è: ${l.auditorium || "–Ω–µ–º–∞"}, –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${l.link || "–Ω–µ–º–∞"}`
          );
        }
      }

      for (const l of removed) {
        if (l.isEvent) {
          messages.push(`‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–¥—ñ—é "${l.eventTitle}" (${l.date})`);
        } else {
          const name = await getPredmetName(l.predmetId);
          // –°–ø—Ä–æ—â–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –ø–∞—Ä:
          messages.push(`‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ –ø–∞—Ä—É: "${name}", –ø–∞—Ä–∏: ${l.pairNumber?.join(", ") || "–Ω–µ–≤—ñ–¥–æ–º—ñ"}`);
        }
      }

      for (const l of updated) {
        if (l.isEvent) {
          messages.push(`‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥—ñ—é "${l.eventTitle}" –Ω–∞ ${l.date}`);
        } else {
          const name = await getPredmetName(l.predmetId);
          messages.push(
            `‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä—É: "${name}", —Ñ–æ—Ä–º–∞—Ç: ${l.format || "–Ω–µ–≤—ñ–¥–æ–º–∏–π"}, —Ç–∏–ø: ${formatType(l.type)}, –¥–Ω—ñ: ${formatDays(l.day)}, –ø–∞—Ä–∏: ${l.pairNumber?.join(", ") || "–Ω–µ–≤—ñ–¥–æ–º—ñ"}, –∞—É–¥–∏—Ç–æ—Ä—ñ—è: ${l.auditorium || "–Ω–µ–º–∞"}, –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${l.link || "–Ω–µ–º–∞"}`
          );
        }
      }

      if (messages.length === 0) {
        messages.push("üîÑ –ó–º—ñ–Ω –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ");
      }

      shortMessage = "üìò –ó–º—ñ–Ω–∏ –≤ –ø–∞—Ä–∞—Ö";
      fullMessage = `üìò –ó–º—ñ–Ω–∏ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ:\n${messages.join("\n")}`;

      break;
    }

    case "delete": {
      const id = change.documentKey._id;
      shortMessage = "‚ùå –í–∏–¥–∞–ª–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥";
      fullMessage = `‚ùå –í–∏–¥–∞–ª–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥ –∑ ID ${id}`;

      // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∫–µ—à—É
      scheduleCache.delete(id.toString());

      break;
    }

    default: {
      shortMessage = "üì¶ –ó–º—ñ–Ω–∞ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ";
      fullMessage = "üì¶ –Ü–Ω—à–∞ –∑–º—ñ–Ω–∞ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó schedules";
    }
  }

  io.emit("dbChange", {
    collection: "schedules",
    short: shortMessage,
    full: fullMessage,
  });

  console.log(`[schedules] ${shortMessage}`);
}
